{"version":3,"sources":["utils/aave/contract_wrappers/atoken.ts"],"names":["AtokenEvents","AtokenContract","address","supportedProvider","txDefaults","logDecodeDependencies","deployedBytecode","ABI","_methodABIIndex","_subscriptionManager","classUtils","bindAll","SubscriptionManager","_web3Wrapper","forEach","item","index","type","methodAbi","name","methodName","this","methodAbiToFunctionSignature","callData","functionSignature","getFunctionSignature","_lookupAbiEncoder","strictDecode","strictDecodeReturnValue","getSelector","self","callAsync","defaultBlock","BaseContract","_assertCallParams","_performCallAsync","data","getABIEncodedTransactionData","rawCallResult","abiEncoder","_strictEncodeArguments","owner","spender","assert","isString","toLowerCase","value","isBigNumber","sendTransactionAsync","txData","opts","shouldValidate","_applyDefaultsToTxDataAsync","estimateGasAsync","bind","txDataWithDefaults","awaitTransactionSuccessAsync","_promiseWithTransactionHash","subtractedValue","addedValue","recipient","amount","sender","_to","_from","_amount","_account","_value","_user","eventName","indexFilterValues","callback","isVerbose","blockPollingIntervalMs","doesBelongToStringEnum","doesConformToSchema","schemas","indexFilterValuesSchema","isFunction","subscriptionToken","subscribe","unsubscribe","unsubscribeAll","blockRange","blockRangeSchema","getLogsAsync","logs","artifact","_addressesProvider","_underlyingAsset","_underlyingAssetDecimals","_name","_symbol","txDataSchema","addressSchema","numberSchema","jsNumber","undefined","compilerOutput","Error","provider","providerUtils","standardizeOrThrow","bytecode","evm","object","abi","logDecodeDependenciesAbiOnly","Object","keys","key","deployAsync","isHexString","constructorAbi","_lookupConstructorAbi","_formatABIDataItemList","inputs","_bigNumberToString","iface","ethers","Interface","deployInfo","deployFunction","encode","web3Wrapper","Web3Wrapper","_applyDefaultsToContractTxDataAsync","txHash","txReceipt","contractInstance","contractAddress","constructorArgs","outputs","payable","stateMutability","anonymous","indexed","constant","contractName"],"mappings":"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","file":"static/js/44.ece5d5b5.chunk.js","sourcesContent":["// tslint:disable:no-consecutive-blank-lines ordered-imports align trailing-comma enum-naming\n// tslint:disable:whitespace no-unbound-method no-trailing-whitespace\n// tslint:disable:no-unused-variable\nimport {\n    AwaitTransactionSuccessOpts,\n    ContractFunctionObj,\n    ContractTxFunctionObj,\n    SendTransactionOpts,\n    BaseContract,\n    SubscriptionManager,\n    PromiseWithTransactionHash,\n    methodAbiToFunctionSignature,\n} from '@0x/base-contract';\nimport { schemas } from '@0x/json-schemas';\nimport {\n    BlockParam,\n    BlockRange,\n    CallData,\n    ContractAbi,\n    ContractArtifact,\n    DecodedLogArgs,\n    LogWithDecodedArgs,\n    MethodAbi,\n    TransactionReceiptWithDecodedLogs,\n    TxData,\n    SupportedProvider,\n} from 'ethereum-types';\nimport { BigNumber, classUtils, providerUtils } from '@0x/utils';\nimport { EventCallback, IndexedFilterValues, SimpleContractArtifact } from '@0x/types';\n// @ts-ignore\nimport { Web3Wrapper } from '@0x/web3-wrapper';\nimport { assert } from '@0x/assert';\nimport * as ethers from 'ethers';\n// tslint:enable:no-unused-variable\n\nexport type AtokenEventArgs =\n    | AtokenApprovalEventArgs\n    | AtokenBalanceTransferEventArgs\n    | AtokenBurnOnLiquidationEventArgs\n    | AtokenInterestRedirectionAllowanceChangedEventArgs\n    | AtokenInterestStreamRedirectedEventArgs\n    | AtokenMintOnDepositEventArgs\n    | AtokenRedeemEventArgs\n    | AtokenRedirectedBalanceUpdatedEventArgs\n    | AtokenTransferEventArgs;\n\nexport enum AtokenEvents {\n    Approval = 'Approval',\n    BalanceTransfer = 'BalanceTransfer',\n    BurnOnLiquidation = 'BurnOnLiquidation',\n    InterestRedirectionAllowanceChanged = 'InterestRedirectionAllowanceChanged',\n    InterestStreamRedirected = 'InterestStreamRedirected',\n    MintOnDeposit = 'MintOnDeposit',\n    Redeem = 'Redeem',\n    RedirectedBalanceUpdated = 'RedirectedBalanceUpdated',\n    Transfer = 'Transfer',\n}\n\nexport interface AtokenApprovalEventArgs extends DecodedLogArgs {\n    owner: string;\n    spender: string;\n    value: BigNumber;\n}\n\nexport interface AtokenBalanceTransferEventArgs extends DecodedLogArgs {\n    _from: string;\n    _to: string;\n    _value: BigNumber;\n    _fromBalanceIncrease: BigNumber;\n    _toBalanceIncrease: BigNumber;\n    _fromIndex: BigNumber;\n    _toIndex: BigNumber;\n}\n\nexport interface AtokenBurnOnLiquidationEventArgs extends DecodedLogArgs {\n    _from: string;\n    _value: BigNumber;\n    _fromBalanceIncrease: BigNumber;\n    _fromIndex: BigNumber;\n}\n\nexport interface AtokenInterestRedirectionAllowanceChangedEventArgs extends DecodedLogArgs {\n    _from: string;\n    _to: string;\n}\n\nexport interface AtokenInterestStreamRedirectedEventArgs extends DecodedLogArgs {\n    _from: string;\n    _to: string;\n    _redirectedBalance: BigNumber;\n    _fromBalanceIncrease: BigNumber;\n    _fromIndex: BigNumber;\n}\n\nexport interface AtokenMintOnDepositEventArgs extends DecodedLogArgs {\n    _from: string;\n    _value: BigNumber;\n    _fromBalanceIncrease: BigNumber;\n    _fromIndex: BigNumber;\n}\n\nexport interface AtokenRedeemEventArgs extends DecodedLogArgs {\n    _from: string;\n    _value: BigNumber;\n    _fromBalanceIncrease: BigNumber;\n    _fromIndex: BigNumber;\n}\n\nexport interface AtokenRedirectedBalanceUpdatedEventArgs extends DecodedLogArgs {\n    _targetAddress: string;\n    _targetBalanceIncrease: BigNumber;\n    _targetIndex: BigNumber;\n    _redirectedBalanceAdded: BigNumber;\n    _redirectedBalanceRemoved: BigNumber;\n}\n\nexport interface AtokenTransferEventArgs extends DecodedLogArgs {\n    from: string;\n    to: string;\n    value: BigNumber;\n}\n\n/* istanbul ignore next */\n// tslint:disable:no-parameter-reassignment\n// tslint:disable-next-line:class-name\nexport class AtokenContract extends BaseContract {\n    /**\n     * @ignore\n     */\n    public static deployedBytecode: string | undefined;\n    public static contractName = 'Atoken';\n    private readonly _methodABIIndex: { [name: string]: number } = {};\n    private readonly _subscriptionManager: SubscriptionManager<AtokenEventArgs, AtokenEvents>;\n    public static async deployFrom0xArtifactAsync(\n        artifact: ContractArtifact | SimpleContractArtifact,\n        supportedProvider: SupportedProvider,\n        txDefaults: Partial<TxData>,\n        logDecodeDependencies: { [contractName: string]: ContractArtifact | SimpleContractArtifact },\n        _addressesProvider: string,\n        _underlyingAsset: string,\n        _underlyingAssetDecimals: number | BigNumber,\n        _name: string,\n        _symbol: string,\n    ): Promise<AtokenContract> {\n        assert.doesConformToSchema('txDefaults', txDefaults, schemas.txDataSchema, [\n            schemas.addressSchema,\n            schemas.numberSchema,\n            schemas.jsNumber,\n        ]);\n        if (artifact.compilerOutput === undefined) {\n            throw new Error('Compiler output not found in the artifact file');\n        }\n        const provider = providerUtils.standardizeOrThrow(supportedProvider);\n        const bytecode = artifact.compilerOutput.evm.bytecode.object;\n        const abi = artifact.compilerOutput.abi;\n        const logDecodeDependenciesAbiOnly: { [contractName: string]: ContractAbi } = {};\n        if (Object.keys(logDecodeDependencies) !== undefined) {\n            for (const key of Object.keys(logDecodeDependencies)) {\n                logDecodeDependenciesAbiOnly[key] = logDecodeDependencies[key].compilerOutput.abi;\n            }\n        }\n        return AtokenContract.deployAsync(\n            bytecode,\n            abi,\n            provider,\n            txDefaults,\n            logDecodeDependenciesAbiOnly,\n            _addressesProvider,\n            _underlyingAsset,\n            _underlyingAssetDecimals,\n            _name,\n            _symbol,\n        );\n    }\n    public static async deployAsync(\n        bytecode: string,\n        abi: ContractAbi,\n        supportedProvider: SupportedProvider,\n        txDefaults: Partial<TxData>,\n        logDecodeDependencies: { [contractName: string]: ContractAbi },\n        _addressesProvider: string,\n        _underlyingAsset: string,\n        _underlyingAssetDecimals: number | BigNumber,\n        _name: string,\n        _symbol: string,\n    ): Promise<AtokenContract> {\n        assert.isHexString('bytecode', bytecode);\n        assert.doesConformToSchema('txDefaults', txDefaults, schemas.txDataSchema, [\n            schemas.addressSchema,\n            schemas.numberSchema,\n            schemas.jsNumber,\n        ]);\n        const provider = providerUtils.standardizeOrThrow(supportedProvider);\n        const constructorAbi = BaseContract._lookupConstructorAbi(abi);\n        [\n            _addressesProvider,\n            _underlyingAsset,\n            _underlyingAssetDecimals,\n            _name,\n            _symbol,\n        ] = BaseContract._formatABIDataItemList(\n            constructorAbi.inputs,\n            [_addressesProvider, _underlyingAsset, _underlyingAssetDecimals, _name, _symbol],\n            BaseContract._bigNumberToString,\n        );\n        // @ts-ignore\n        const iface = new ethers.utils.Interface(abi);\n        // @ts-ignore\n        const deployInfo = iface.deployFunction;\n        const txData = deployInfo.encode(bytecode, [\n            _addressesProvider,\n            _underlyingAsset,\n            _underlyingAssetDecimals,\n            _name,\n            _symbol,\n        ]);\n        const web3Wrapper = new Web3Wrapper(provider);\n        const txDataWithDefaults = await BaseContract._applyDefaultsToContractTxDataAsync(\n            {\n                data: txData,\n                ...txDefaults,\n            },\n            web3Wrapper.estimateGasAsync.bind(web3Wrapper),\n        );\n        const txHash = await web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n        const txReceipt = await web3Wrapper.awaitTransactionSuccessAsync(txHash);\n        const contractInstance = new AtokenContract(\n            txReceipt.contractAddress as string,\n            provider,\n            txDefaults,\n            logDecodeDependencies,\n        );\n        contractInstance.constructorArgs = [\n            _addressesProvider,\n            _underlyingAsset,\n            _underlyingAssetDecimals,\n            _name,\n            _symbol,\n        ];\n        return contractInstance;\n    }\n\n    /**\n     * @returns      The contract ABI\n     */\n    public static ABI(): ContractAbi {\n        const abi = [\n            {\n                inputs: [\n                    {\n                        name: '_addressesProvider',\n                        type: 'address',\n                    },\n                    {\n                        name: '_underlyingAsset',\n                        type: 'address',\n                    },\n                    {\n                        name: '_underlyingAssetDecimals',\n                        type: 'uint8',\n                    },\n                    {\n                        name: '_name',\n                        type: 'string',\n                    },\n                    {\n                        name: '_symbol',\n                        type: 'string',\n                    },\n                ],\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'constructor',\n            },\n            {\n                anonymous: false,\n                inputs: [\n                    {\n                        name: 'owner',\n                        type: 'address',\n                        indexed: true,\n                    },\n                    {\n                        name: 'spender',\n                        type: 'address',\n                        indexed: true,\n                    },\n                    {\n                        name: 'value',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                ],\n                name: 'Approval',\n                outputs: [],\n                type: 'event',\n            },\n            {\n                anonymous: false,\n                inputs: [\n                    {\n                        name: '_from',\n                        type: 'address',\n                        indexed: true,\n                    },\n                    {\n                        name: '_to',\n                        type: 'address',\n                        indexed: true,\n                    },\n                    {\n                        name: '_value',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                    {\n                        name: '_fromBalanceIncrease',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                    {\n                        name: '_toBalanceIncrease',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                    {\n                        name: '_fromIndex',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                    {\n                        name: '_toIndex',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                ],\n                name: 'BalanceTransfer',\n                outputs: [],\n                type: 'event',\n            },\n            {\n                anonymous: false,\n                inputs: [\n                    {\n                        name: '_from',\n                        type: 'address',\n                        indexed: true,\n                    },\n                    {\n                        name: '_value',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                    {\n                        name: '_fromBalanceIncrease',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                    {\n                        name: '_fromIndex',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                ],\n                name: 'BurnOnLiquidation',\n                outputs: [],\n                type: 'event',\n            },\n            {\n                anonymous: false,\n                inputs: [\n                    {\n                        name: '_from',\n                        type: 'address',\n                        indexed: true,\n                    },\n                    {\n                        name: '_to',\n                        type: 'address',\n                        indexed: true,\n                    },\n                ],\n                name: 'InterestRedirectionAllowanceChanged',\n                outputs: [],\n                type: 'event',\n            },\n            {\n                anonymous: false,\n                inputs: [\n                    {\n                        name: '_from',\n                        type: 'address',\n                        indexed: true,\n                    },\n                    {\n                        name: '_to',\n                        type: 'address',\n                        indexed: true,\n                    },\n                    {\n                        name: '_redirectedBalance',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                    {\n                        name: '_fromBalanceIncrease',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                    {\n                        name: '_fromIndex',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                ],\n                name: 'InterestStreamRedirected',\n                outputs: [],\n                type: 'event',\n            },\n            {\n                anonymous: false,\n                inputs: [\n                    {\n                        name: '_from',\n                        type: 'address',\n                        indexed: true,\n                    },\n                    {\n                        name: '_value',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                    {\n                        name: '_fromBalanceIncrease',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                    {\n                        name: '_fromIndex',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                ],\n                name: 'MintOnDeposit',\n                outputs: [],\n                type: 'event',\n            },\n            {\n                anonymous: false,\n                inputs: [\n                    {\n                        name: '_from',\n                        type: 'address',\n                        indexed: true,\n                    },\n                    {\n                        name: '_value',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                    {\n                        name: '_fromBalanceIncrease',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                    {\n                        name: '_fromIndex',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                ],\n                name: 'Redeem',\n                outputs: [],\n                type: 'event',\n            },\n            {\n                anonymous: false,\n                inputs: [\n                    {\n                        name: '_targetAddress',\n                        type: 'address',\n                        indexed: true,\n                    },\n                    {\n                        name: '_targetBalanceIncrease',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                    {\n                        name: '_targetIndex',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                    {\n                        name: '_redirectedBalanceAdded',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                    {\n                        name: '_redirectedBalanceRemoved',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                ],\n                name: 'RedirectedBalanceUpdated',\n                outputs: [],\n                type: 'event',\n            },\n            {\n                anonymous: false,\n                inputs: [\n                    {\n                        name: 'from',\n                        type: 'address',\n                        indexed: true,\n                    },\n                    {\n                        name: 'to',\n                        type: 'address',\n                        indexed: true,\n                    },\n                    {\n                        name: 'value',\n                        type: 'uint256',\n                        indexed: false,\n                    },\n                ],\n                name: 'Transfer',\n                outputs: [],\n                type: 'event',\n            },\n            {\n                constant: true,\n                inputs: [],\n                name: 'UINT_MAX_VALUE',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'uint256',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: 'owner',\n                        type: 'address',\n                    },\n                    {\n                        name: 'spender',\n                        type: 'address',\n                    },\n                ],\n                name: 'allowance',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'uint256',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: 'spender',\n                        type: 'address',\n                    },\n                    {\n                        name: 'value',\n                        type: 'uint256',\n                    },\n                ],\n                name: 'approve',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'bool',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [],\n                name: 'decimals',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'uint8',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: 'spender',\n                        type: 'address',\n                    },\n                    {\n                        name: 'subtractedValue',\n                        type: 'uint256',\n                    },\n                ],\n                name: 'decreaseAllowance',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'bool',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: 'spender',\n                        type: 'address',\n                    },\n                    {\n                        name: 'addedValue',\n                        type: 'uint256',\n                    },\n                ],\n                name: 'increaseAllowance',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'bool',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [],\n                name: 'name',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'string',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [],\n                name: 'symbol',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'string',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                ],\n                name: 'transfer',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'bool',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                ],\n                name: 'transferFrom',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'bool',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [],\n                name: 'underlyingAssetAddress',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'address',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: '_to',\n                        type: 'address',\n                    },\n                ],\n                name: 'redirectInterestStream',\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: '_from',\n                        type: 'address',\n                    },\n                    {\n                        name: '_to',\n                        type: 'address',\n                    },\n                ],\n                name: 'redirectInterestStreamOf',\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: '_to',\n                        type: 'address',\n                    },\n                ],\n                name: 'allowInterestRedirectionTo',\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: '_amount',\n                        type: 'uint256',\n                    },\n                ],\n                name: 'redeem',\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: '_account',\n                        type: 'address',\n                    },\n                    {\n                        name: '_amount',\n                        type: 'uint256',\n                    },\n                ],\n                name: 'mintOnDeposit',\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: '_account',\n                        type: 'address',\n                    },\n                    {\n                        name: '_value',\n                        type: 'uint256',\n                    },\n                ],\n                name: 'burnOnLiquidation',\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: '_from',\n                        type: 'address',\n                    },\n                    {\n                        name: '_to',\n                        type: 'address',\n                    },\n                    {\n                        name: '_value',\n                        type: 'uint256',\n                    },\n                ],\n                name: 'transferOnLiquidation',\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: '_user',\n                        type: 'address',\n                    },\n                ],\n                name: 'balanceOf',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'uint256',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: '_user',\n                        type: 'address',\n                    },\n                ],\n                name: 'principalBalanceOf',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'uint256',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [],\n                name: 'totalSupply',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'uint256',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: '_user',\n                        type: 'address',\n                    },\n                    {\n                        name: '_amount',\n                        type: 'uint256',\n                    },\n                ],\n                name: 'isTransferAllowed',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'bool',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: '_user',\n                        type: 'address',\n                    },\n                ],\n                name: 'getUserIndex',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'uint256',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: '_user',\n                        type: 'address',\n                    },\n                ],\n                name: 'getInterestRedirectionAddress',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'address',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: '_user',\n                        type: 'address',\n                    },\n                ],\n                name: 'getRedirectedBalance',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'uint256',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n        ] as ContractAbi;\n        return abi;\n    }\n\n    public getFunctionSignature(methodName: string): string {\n        const index = this._methodABIIndex[methodName];\n        const methodAbi = AtokenContract.ABI()[index] as MethodAbi; // tslint:disable-line:no-unnecessary-type-assertion\n        const functionSignature = methodAbiToFunctionSignature(methodAbi);\n        return functionSignature;\n    }\n    public getABIDecodedTransactionData<T>(methodName: string, callData: string): T {\n        const functionSignature = this.getFunctionSignature(methodName);\n        const self = (this as any) as AtokenContract;\n        const abiEncoder = self._lookupAbiEncoder(functionSignature);\n        const abiDecodedCallData = abiEncoder.strictDecode<T>(callData);\n        return abiDecodedCallData;\n    }\n    public getABIDecodedReturnData<T>(methodName: string, callData: string): T {\n        const functionSignature = this.getFunctionSignature(methodName);\n        const self = (this as any) as AtokenContract;\n        const abiEncoder = self._lookupAbiEncoder(functionSignature);\n        const abiDecodedCallData = abiEncoder.strictDecodeReturnValue<T>(callData);\n        return abiDecodedCallData;\n    }\n    public getSelector(methodName: string): string {\n        const functionSignature = this.getFunctionSignature(methodName);\n        const self = (this as any) as AtokenContract;\n        const abiEncoder = self._lookupAbiEncoder(functionSignature);\n        return abiEncoder.getSelector();\n    }\n\n    public UINT_MAX_VALUE(): ContractFunctionObj<BigNumber> {\n        const self = (this as any) as AtokenContract;\n        const functionSignature = 'UINT_MAX_VALUE()';\n\n        return {\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, []);\n            },\n        };\n    }\n    public allowance(owner: string, spender: string): ContractFunctionObj<BigNumber> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('owner', owner);\n        assert.isString('spender', spender);\n        const functionSignature = 'allowance(address,address)';\n\n        return {\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [owner.toLowerCase(), spender.toLowerCase()]);\n            },\n        };\n    }\n    public approve(spender: string, value: BigNumber): ContractTxFunctionObj<boolean> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('spender', spender);\n        assert.isBigNumber('value', value);\n        const functionSignature = 'approve(address,uint256)';\n\n        return {\n            async sendTransactionAsync(\n                txData?: Partial<TxData> | undefined,\n                opts: SendTransactionOpts = { shouldValidate: true },\n            ): Promise<string> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    { ...txData, data: this.getABIEncodedTransactionData() },\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData?: Partial<TxData>,\n                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },\n            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<boolean> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<boolean>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [spender.toLowerCase(), value]);\n            },\n        };\n    }\n    public decimals(): ContractFunctionObj<BigNumber> {\n        const self = (this as any) as AtokenContract;\n        const functionSignature = 'decimals()';\n\n        return {\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, []);\n            },\n        };\n    }\n    public decreaseAllowance(spender: string, subtractedValue: BigNumber): ContractTxFunctionObj<boolean> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('spender', spender);\n        assert.isBigNumber('subtractedValue', subtractedValue);\n        const functionSignature = 'decreaseAllowance(address,uint256)';\n\n        return {\n            async sendTransactionAsync(\n                txData?: Partial<TxData> | undefined,\n                opts: SendTransactionOpts = { shouldValidate: true },\n            ): Promise<string> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    { ...txData, data: this.getABIEncodedTransactionData() },\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData?: Partial<TxData>,\n                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },\n            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<boolean> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<boolean>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [spender.toLowerCase(), subtractedValue]);\n            },\n        };\n    }\n    public increaseAllowance(spender: string, addedValue: BigNumber): ContractTxFunctionObj<boolean> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('spender', spender);\n        assert.isBigNumber('addedValue', addedValue);\n        const functionSignature = 'increaseAllowance(address,uint256)';\n\n        return {\n            async sendTransactionAsync(\n                txData?: Partial<TxData> | undefined,\n                opts: SendTransactionOpts = { shouldValidate: true },\n            ): Promise<string> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    { ...txData, data: this.getABIEncodedTransactionData() },\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData?: Partial<TxData>,\n                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },\n            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<boolean> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<boolean>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [spender.toLowerCase(), addedValue]);\n            },\n        };\n    }\n    public name(): ContractFunctionObj<string> {\n        const self = (this as any) as AtokenContract;\n        const functionSignature = 'name()';\n\n        return {\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<string> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<string>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, []);\n            },\n        };\n    }\n    public symbol(): ContractFunctionObj<string> {\n        const self = (this as any) as AtokenContract;\n        const functionSignature = 'symbol()';\n\n        return {\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<string> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<string>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, []);\n            },\n        };\n    }\n    public transfer(recipient: string, amount: BigNumber): ContractTxFunctionObj<boolean> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('recipient', recipient);\n        assert.isBigNumber('amount', amount);\n        const functionSignature = 'transfer(address,uint256)';\n\n        return {\n            async sendTransactionAsync(\n                txData?: Partial<TxData> | undefined,\n                opts: SendTransactionOpts = { shouldValidate: true },\n            ): Promise<string> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    { ...txData, data: this.getABIEncodedTransactionData() },\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData?: Partial<TxData>,\n                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },\n            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<boolean> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<boolean>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [recipient.toLowerCase(), amount]);\n            },\n        };\n    }\n    public transferFrom(sender: string, recipient: string, amount: BigNumber): ContractTxFunctionObj<boolean> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('sender', sender);\n        assert.isString('recipient', recipient);\n        assert.isBigNumber('amount', amount);\n        const functionSignature = 'transferFrom(address,address,uint256)';\n\n        return {\n            async sendTransactionAsync(\n                txData?: Partial<TxData> | undefined,\n                opts: SendTransactionOpts = { shouldValidate: true },\n            ): Promise<string> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    { ...txData, data: this.getABIEncodedTransactionData() },\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData?: Partial<TxData>,\n                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },\n            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<boolean> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<boolean>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [\n                    sender.toLowerCase(),\n                    recipient.toLowerCase(),\n                    amount,\n                ]);\n            },\n        };\n    }\n    public underlyingAssetAddress(): ContractFunctionObj<string> {\n        const self = (this as any) as AtokenContract;\n        const functionSignature = 'underlyingAssetAddress()';\n\n        return {\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<string> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<string>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, []);\n            },\n        };\n    }\n    public redirectInterestStream(_to: string): ContractTxFunctionObj<void> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('_to', _to);\n        const functionSignature = 'redirectInterestStream(address)';\n\n        return {\n            async sendTransactionAsync(\n                txData?: Partial<TxData> | undefined,\n                opts: SendTransactionOpts = { shouldValidate: true },\n            ): Promise<string> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    { ...txData, data: this.getABIEncodedTransactionData() },\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData?: Partial<TxData>,\n                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },\n            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<void> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<void>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [_to.toLowerCase()]);\n            },\n        };\n    }\n    public redirectInterestStreamOf(_from: string, _to: string): ContractTxFunctionObj<void> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('_from', _from);\n        assert.isString('_to', _to);\n        const functionSignature = 'redirectInterestStreamOf(address,address)';\n\n        return {\n            async sendTransactionAsync(\n                txData?: Partial<TxData> | undefined,\n                opts: SendTransactionOpts = { shouldValidate: true },\n            ): Promise<string> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    { ...txData, data: this.getABIEncodedTransactionData() },\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData?: Partial<TxData>,\n                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },\n            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<void> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<void>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [_from.toLowerCase(), _to.toLowerCase()]);\n            },\n        };\n    }\n    public allowInterestRedirectionTo(_to: string): ContractTxFunctionObj<void> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('_to', _to);\n        const functionSignature = 'allowInterestRedirectionTo(address)';\n\n        return {\n            async sendTransactionAsync(\n                txData?: Partial<TxData> | undefined,\n                opts: SendTransactionOpts = { shouldValidate: true },\n            ): Promise<string> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    { ...txData, data: this.getABIEncodedTransactionData() },\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData?: Partial<TxData>,\n                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },\n            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<void> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<void>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [_to.toLowerCase()]);\n            },\n        };\n    }\n    public redeem(_amount: BigNumber): ContractTxFunctionObj<void> {\n        const self = (this as any) as AtokenContract;\n        assert.isBigNumber('_amount', _amount);\n        const functionSignature = 'redeem(uint256)';\n\n        return {\n            async sendTransactionAsync(\n                txData?: Partial<TxData> | undefined,\n                opts: SendTransactionOpts = { shouldValidate: true },\n            ): Promise<string> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    { ...txData, data: this.getABIEncodedTransactionData() },\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData?: Partial<TxData>,\n                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },\n            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<void> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<void>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [_amount]);\n            },\n        };\n    }\n    public mintOnDeposit(_account: string, _amount: BigNumber): ContractTxFunctionObj<void> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('_account', _account);\n        assert.isBigNumber('_amount', _amount);\n        const functionSignature = 'mintOnDeposit(address,uint256)';\n\n        return {\n            async sendTransactionAsync(\n                txData?: Partial<TxData> | undefined,\n                opts: SendTransactionOpts = { shouldValidate: true },\n            ): Promise<string> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    { ...txData, data: this.getABIEncodedTransactionData() },\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData?: Partial<TxData>,\n                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },\n            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<void> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<void>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [_account.toLowerCase(), _amount]);\n            },\n        };\n    }\n    public burnOnLiquidation(_account: string, _value: BigNumber): ContractTxFunctionObj<void> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('_account', _account);\n        assert.isBigNumber('_value', _value);\n        const functionSignature = 'burnOnLiquidation(address,uint256)';\n\n        return {\n            async sendTransactionAsync(\n                txData?: Partial<TxData> | undefined,\n                opts: SendTransactionOpts = { shouldValidate: true },\n            ): Promise<string> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    { ...txData, data: this.getABIEncodedTransactionData() },\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData?: Partial<TxData>,\n                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },\n            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<void> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<void>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [_account.toLowerCase(), _value]);\n            },\n        };\n    }\n    public transferOnLiquidation(_from: string, _to: string, _value: BigNumber): ContractTxFunctionObj<void> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('_from', _from);\n        assert.isString('_to', _to);\n        assert.isBigNumber('_value', _value);\n        const functionSignature = 'transferOnLiquidation(address,address,uint256)';\n\n        return {\n            async sendTransactionAsync(\n                txData?: Partial<TxData> | undefined,\n                opts: SendTransactionOpts = { shouldValidate: true },\n            ): Promise<string> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    { ...txData, data: this.getABIEncodedTransactionData() },\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData?: Partial<TxData>,\n                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },\n            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<void> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<void>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [_from.toLowerCase(), _to.toLowerCase(), _value]);\n            },\n        };\n    }\n    public balanceOf(_user: string): ContractFunctionObj<BigNumber> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('_user', _user);\n        const functionSignature = 'balanceOf(address)';\n\n        return {\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [_user.toLowerCase()]);\n            },\n        };\n    }\n    public principalBalanceOf(_user: string): ContractFunctionObj<BigNumber> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('_user', _user);\n        const functionSignature = 'principalBalanceOf(address)';\n\n        return {\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [_user.toLowerCase()]);\n            },\n        };\n    }\n    public totalSupply(): ContractFunctionObj<BigNumber> {\n        const self = (this as any) as AtokenContract;\n        const functionSignature = 'totalSupply()';\n\n        return {\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, []);\n            },\n        };\n    }\n    public isTransferAllowed(_user: string, _amount: BigNumber): ContractFunctionObj<boolean> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('_user', _user);\n        assert.isBigNumber('_amount', _amount);\n        const functionSignature = 'isTransferAllowed(address,uint256)';\n\n        return {\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<boolean> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<boolean>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [_user.toLowerCase(), _amount]);\n            },\n        };\n    }\n    public getUserIndex(_user: string): ContractFunctionObj<BigNumber> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('_user', _user);\n        const functionSignature = 'getUserIndex(address)';\n\n        return {\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [_user.toLowerCase()]);\n            },\n        };\n    }\n    public getInterestRedirectionAddress(_user: string): ContractFunctionObj<string> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('_user', _user);\n        const functionSignature = 'getInterestRedirectionAddress(address)';\n\n        return {\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<string> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<string>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [_user.toLowerCase()]);\n            },\n        };\n    }\n    public getRedirectedBalance(_user: string): ContractFunctionObj<BigNumber> {\n        const self = (this as any) as AtokenContract;\n        assert.isString('_user', _user);\n        const functionSignature = 'getRedirectedBalance(address)';\n\n        return {\n            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [_user.toLowerCase()]);\n            },\n        };\n    }\n\n    /**\n     * Subscribe to an event type emitted by the Atoken contract.\n     * @param eventName The Atoken contract event you would like to subscribe to.\n     * @param indexFilterValues An object where the keys are indexed args returned by the event and\n     * the value is the value you are interested in. E.g `{maker: aUserAddressHex}`\n     * @param callback Callback that gets called when a log is added/removed\n     * @param isVerbose Enable verbose subscription warnings (e.g recoverable network issues encountered)\n     * @return Subscription token used later to unsubscribe\n     */\n    public subscribe<ArgsType extends AtokenEventArgs>(\n        eventName: AtokenEvents,\n        indexFilterValues: IndexedFilterValues,\n        callback: EventCallback<ArgsType>,\n        isVerbose: boolean = false,\n        blockPollingIntervalMs?: number,\n    ): string {\n        assert.doesBelongToStringEnum('eventName', eventName, AtokenEvents);\n        assert.doesConformToSchema('indexFilterValues', indexFilterValues, schemas.indexFilterValuesSchema);\n        assert.isFunction('callback', callback);\n        const subscriptionToken = this._subscriptionManager.subscribe<ArgsType>(\n            this.address,\n            eventName,\n            indexFilterValues,\n            AtokenContract.ABI(),\n            callback,\n            isVerbose,\n            blockPollingIntervalMs,\n        );\n        return subscriptionToken;\n    }\n    /**\n     * Cancel a subscription\n     * @param subscriptionToken Subscription token returned by `subscribe()`\n     */\n    public unsubscribe(subscriptionToken: string): void {\n        this._subscriptionManager.unsubscribe(subscriptionToken);\n    }\n    /**\n     * Cancels all existing subscriptions\n     */\n    public unsubscribeAll(): void {\n        this._subscriptionManager.unsubscribeAll();\n    }\n    /**\n     * Gets historical logs without creating a subscription\n     * @param eventName The Atoken contract event you would like to subscribe to.\n     * @param blockRange Block range to get logs from.\n     * @param indexFilterValues An object where the keys are indexed args returned by the event and\n     * the value is the value you are interested in. E.g `{_from: aUserAddressHex}`\n     * @return Array of logs that match the parameters\n     */\n    public async getLogsAsync<ArgsType extends AtokenEventArgs>(\n        eventName: AtokenEvents,\n        blockRange: BlockRange,\n        indexFilterValues: IndexedFilterValues,\n    ): Promise<Array<LogWithDecodedArgs<ArgsType>>> {\n        assert.doesBelongToStringEnum('eventName', eventName, AtokenEvents);\n        assert.doesConformToSchema('blockRange', blockRange, schemas.blockRangeSchema);\n        assert.doesConformToSchema('indexFilterValues', indexFilterValues, schemas.indexFilterValuesSchema);\n        const logs = await this._subscriptionManager.getLogsAsync<ArgsType>(\n            this.address,\n            eventName,\n            blockRange,\n            indexFilterValues,\n            AtokenContract.ABI(),\n        );\n        return logs;\n    }\n    constructor(\n        address: string,\n        supportedProvider: SupportedProvider,\n        txDefaults?: Partial<TxData>,\n        logDecodeDependencies?: { [contractName: string]: ContractAbi },\n        deployedBytecode: string | undefined = AtokenContract.deployedBytecode,\n    ) {\n        super(\n            'Atoken',\n            AtokenContract.ABI(),\n            address,\n            supportedProvider,\n            txDefaults,\n            logDecodeDependencies,\n            deployedBytecode,\n        );\n        classUtils.bindAll(this, ['_abiEncoderByFunctionSignature', 'address', '_web3Wrapper']);\n        this._subscriptionManager = new SubscriptionManager<AtokenEventArgs, AtokenEvents>(\n            AtokenContract.ABI(),\n            this._web3Wrapper,\n        );\n        AtokenContract.ABI().forEach((item, index) => {\n            if (item.type === 'function') {\n                const methodAbi = item as MethodAbi;\n                this._methodABIIndex[methodAbi.name] = index;\n            }\n        });\n    }\n}\n\n// tslint:disable:max-file-line-count\n// tslint:enable:no-unbound-method no-parameter-reassignment no-consecutive-blank-lines ordered-imports align\n// tslint:enable:trailing-comma whitespace no-trailing-whitespace\n"],"sourceRoot":""}