{"version":3,"sources":["../../src.ts/ethers.ts","../../src.ts/_version.ts","utils/aave/contract_wrappers/aave_reader.ts"],"names":["AaveReaderContract","address","supportedProvider","txDefaults","logDecodeDependencies","deployedBytecode","ABI","_methodABIIndex","classUtils","bindAll","forEach","item","index","type","methodAbi","name","methodName","this","methodAbiToFunctionSignature","callData","functionSignature","getFunctionSignature","_lookupAbiEncoder","strictDecode","strictDecodeReturnValue","getSelector","ethAccount","reserves","self","assert","isString","isArray","callAsync","defaultBlock","BaseContract","_assertCallParams","_performCallAsync","data","getABIEncodedTransactionData","rawCallResult","abiEncoder","_strictEncodeArguments","toLowerCase","artifact","_lendingPoolAddressProvider","doesConformToSchema","schemas","txDataSchema","addressSchema","numberSchema","jsNumber","undefined","compilerOutput","Error","provider","providerUtils","standardizeOrThrow","bytecode","evm","object","abi","logDecodeDependenciesAbiOnly","Object","keys","key","deployAsync","isHexString","constructorAbi","_lookupConstructorAbi","_formatABIDataItemList","inputs","_bigNumberToString","iface","ethers","Interface","deployInfo","deployFunction","txData","encode","web3Wrapper","Web3Wrapper","_applyDefaultsToContractTxDataAsync","estimateGasAsync","bind","txDataWithDefaults","sendTransactionAsync","txHash","awaitTransactionSuccessAsync","txReceipt","contractInstance","contractAddress","constructorArgs","constant","outputs","components","payable","stateMutability","contractName"],"mappings":"otKAkCe,IAAI,SClCI,kB,kOC4BVA,EAAb,kDAuOI,WACIC,EACAC,EACAC,EACAC,GAED,IAAD,EADEC,EACF,uDADyCL,EAAmBK,iBAC5D,4BACE,cACI,aACAL,EAAmBM,MACnBL,EACAC,EACAC,EACAC,EACAC,IA/OSE,gBAA8C,GAiP3DC,aAAWC,QAAX,eAAyB,CAAC,iCAAkC,UAAW,iBACvET,EAAmBM,MAAMI,SAAQ,SAACC,EAAMC,GACpC,GAAkB,aAAdD,EAAKE,KAAqB,CAC1B,IAAMC,EAAYH,EAClB,EAAKJ,gBAAgBO,EAAUC,MAAQH,MAdjD,EA7ON,iEAwJgCI,GACxB,IAAMJ,EAAQK,KAAKV,gBAAgBS,GAC7BF,EAAYd,EAAmBM,MAAMM,GAE3C,OAD0BM,uCAA6BJ,KA3J/D,mDA8J2CE,EAAoBG,GACvD,IAAMC,EAAoBH,KAAKI,qBAAqBL,GAIpD,OAHcC,KACUK,kBAAkBF,GACJG,aAAgBJ,KAlK9D,8CAqKsCH,EAAoBG,GAClD,IAAMC,EAAoBH,KAAKI,qBAAqBL,GAIpD,OAHcC,KACUK,kBAAkBF,GACJI,wBAA2BL,KAzKzE,kCA4KuBH,GACf,IAAMI,EAAoBH,KAAKI,qBAAqBL,GAGpD,OAFcC,KACUK,kBAAkBF,GACxBK,gBAhL1B,0CAoLQC,EACAC,GAUA,IAAMC,EAAQX,KACdY,SAAOC,SAAS,aAAcJ,GAC9BG,SAAOE,QAAQ,WAAYJ,GAC3B,IAAMP,EAAoB,yCAE1B,MAAO,CACGY,UADH,WAYA,IAAD,iJAVEb,EAUF,+BAVgC,GAC9Bc,EASF,uBACEC,eAAaC,kBAAkBhB,EAAUc,GAD3C,SAE8BL,EAAKQ,kBAAL,2BACnBjB,GADmB,IACTkB,KAAM,EAAKC,iCAC1BL,GAJN,cAEQM,EAFR,OAMQC,EAAaZ,EAAKN,kBAAkBF,GAN5C,kBAOSoB,EAAWhB,wBAQhBe,IAfJ,8CAiBFD,6BA7BG,WA8BC,OAAOV,EAAKa,uBAAuBrB,EAAmB,CAACM,EAAWgB,cAAef,SAlOjG,0FAQQgB,EACAzC,EACAC,EACAC,EACAwC,GAZR,sFAcQf,SAAOgB,oBAAoB,aAAc1C,EAAY2C,UAAQC,aAAc,CACvED,UAAQE,cACRF,UAAQG,aACRH,UAAQI,gBAEoBC,IAA5BR,EAASS,eAnBrB,sBAoBkB,IAAIC,MAAM,kDApB5B,OA0BQ,GAJMC,EAAWC,gBAAcC,mBAAmBtD,GAC5CuD,EAAWd,EAASS,eAAeM,IAAID,SAASE,OAChDC,EAAMjB,EAASS,eAAeQ,IAC9BC,EAAwE,QACnCV,IAAvCW,OAAOC,KAAK3D,GACZ,UAAkB0D,OAAOC,KAAK3D,GAA9B,eAAW4D,EAA2C,KAClDH,EAA6BG,GAAO5D,EAAsB4D,GAAKZ,eAAeQ,IA5B9F,yBA+Be5D,EAAmBiE,YACtBR,EACAG,EACAN,EACAnD,EACA0D,EACAjB,IArCZ,qLAyCQa,EACAG,EACA1D,EACAC,EACAC,EACAwC,GA9CR,oGAgDQf,SAAOqC,YAAY,WAAYT,GAC/B5B,SAAOgB,oBAAoB,aAAc1C,EAAY2C,UAAQC,aAAc,CACvED,UAAQE,cACRF,UAAQG,aACRH,UAAQI,WAENI,EAAWC,gBAAcC,mBAAmBtD,GAC5CiE,EAAiBjC,eAAakC,sBAAsBR,GAvDlE,EAwDwC1B,eAAamC,uBACzCF,EAAeG,OACf,CAAC1B,GACDV,eAAaqC,oBA3DzB,mBAwDS3B,EAxDT,KA8Dc4B,EAAQ,IAAIC,IAAaC,UAAUd,GAEnCe,EAAaH,EAAMI,eACnBC,EAASF,EAAWG,OAAOrB,EAAU,CAACb,IACtCmC,EAAc,IAAIC,cAAY1B,GAlE5C,UAmEyCpB,eAAa+C,oCAAb,aAEzB5C,KAAMwC,GACH1E,GAEP4E,EAAYG,iBAAiBC,KAAKJ,IAxE9C,eAmEcK,EAnEd,iBA0E6BL,EAAYM,qBAAqBD,GA1E9D,eA0EcE,EA1Ed,iBA2EgCP,EAAYQ,6BAA6BD,GA3EzE,eA2EcE,EA3Ed,QA4EcC,EAAmB,IAAIzF,EACzBwF,EAAUE,gBACVpC,EACAnD,EACAC,IAEauF,gBAAkB,CAAC/C,GAlF5C,kBAmFe6C,GAnFf,yIAqJQ,MA3DY,CACR,CACIG,UAAU,EACVtB,OAAQ,CACJ,CACIvD,KAAM,aACNF,KAAM,WAEV,CACIE,KAAM,WACNF,KAAM,cAGdE,KAAM,sBACN8E,QAAS,CACL,CACI9E,KAAM,YACNF,KAAM,UACNiF,WAAY,CACR,CACI/E,KAAM,iBACNF,KAAM,WAEV,CACIE,KAAM,YACNF,KAAM,WAEV,CACIE,KAAM,UACNF,KAAM,WAEV,CACIE,KAAM,oBACNF,KAAM,WAEV,CACIE,KAAM,gBACNF,KAAM,cAKtBkF,SAAS,EACTC,gBAAiB,OACjBnF,KAAM,YAEV,CACIyD,OAAQ,CACJ,CACIvD,KAAM,8BACNF,KAAM,YAGdgF,QAAS,GACTE,SAAS,EACTC,gBAAiB,aACjBnF,KAAM,oBAlJtB,GAAwCqB,gBAA3BlC,EAIKK,sB,EAJLL,EAKKiG,aAAe","file":"static/js/42.7465c6a9.chunk.js","sourcesContent":["\"use strict\";\nimport { Contract, ContractFactory } from \"@ethersproject/contracts\";\nimport { BigNumber, FixedNumber } from \"@ethersproject/bignumber\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { Wallet } from \"@ethersproject/wallet\";\nimport * as constants from \"@ethersproject/constants\";\nimport * as providers from \"@ethersproject/providers\";\nimport { getDefaultProvider } from \"@ethersproject/providers\";\nimport { Wordlist, wordlists } from \"@ethersproject/wordlists\";\nimport * as utils from \"./utils\";\nimport { ErrorCode as errors, Logger } from \"@ethersproject/logger\";\n////////////////////////\n// Compile-Time Constants\n// This is generated by \"npm run dist\"\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n////////////////////////\n// Exports\nexport { Signer, Wallet, VoidSigner, getDefaultProvider, providers, Contract, ContractFactory, BigNumber, FixedNumber, constants, errors, logger, utils, wordlists, \n////////////////////////\n// Compile-Time Constants\nversion, Wordlist };\n//# sourceMappingURL=ethers.js.map","export const version = \"ethers/5.0.26\";\n//# sourceMappingURL=_version.js.map","// tslint:disable:no-consecutive-blank-lines ordered-imports align trailing-comma enum-naming\n// tslint:disable:whitespace no-unbound-method no-trailing-whitespace\n// tslint:disable:no-unused-variable\nimport {\n    ContractFunctionObj,\n    BaseContract,\n    methodAbiToFunctionSignature,\n} from '@0x/base-contract';\nimport { schemas } from '@0x/json-schemas';\nimport {\n    BlockParam,\n    CallData,\n    ContractAbi,\n    ContractArtifact,\n    MethodAbi,\n    TxData,\n    SupportedProvider,\n} from 'ethereum-types';\nimport { BigNumber, classUtils, providerUtils } from '@0x/utils';\nimport { SimpleContractArtifact } from '@0x/types';\nimport { Web3Wrapper } from '@0x/web3-wrapper';\nimport { assert } from '@0x/assert';\nimport * as ethers from 'ethers';\n// tslint:enable:no-unused-variable\n\n/* istanbul ignore next */\n// tslint:disable:no-parameter-reassignment\n// tslint:disable-next-line:class-name\nexport class AaveReaderContract extends BaseContract {\n    /**\n     * @ignore\n     */\n    public static deployedBytecode: string | undefined;\n    public static contractName = 'AaveReader';\n    private readonly _methodABIIndex: { [name: string]: number } = {};\n    public static async deployFrom0xArtifactAsync(\n        artifact: ContractArtifact | SimpleContractArtifact,\n        supportedProvider: SupportedProvider,\n        txDefaults: Partial<TxData>,\n        logDecodeDependencies: { [contractName: string]: ContractArtifact | SimpleContractArtifact },\n        _lendingPoolAddressProvider: string,\n    ): Promise<AaveReaderContract> {\n        assert.doesConformToSchema('txDefaults', txDefaults, schemas.txDataSchema, [\n            schemas.addressSchema,\n            schemas.numberSchema,\n            schemas.jsNumber,\n        ]);\n        if (artifact.compilerOutput === undefined) {\n            throw new Error('Compiler output not found in the artifact file');\n        }\n        const provider = providerUtils.standardizeOrThrow(supportedProvider);\n        const bytecode = artifact.compilerOutput.evm.bytecode.object;\n        const abi = artifact.compilerOutput.abi;\n        const logDecodeDependenciesAbiOnly: { [contractName: string]: ContractAbi } = {};\n        if (Object.keys(logDecodeDependencies) !== undefined) {\n            for (const key of Object.keys(logDecodeDependencies)) {\n                logDecodeDependenciesAbiOnly[key] = logDecodeDependencies[key].compilerOutput.abi;\n            }\n        }\n        return AaveReaderContract.deployAsync(\n            bytecode,\n            abi,\n            provider,\n            txDefaults,\n            logDecodeDependenciesAbiOnly,\n            _lendingPoolAddressProvider,\n        );\n    }\n    public static async deployAsync(\n        bytecode: string,\n        abi: ContractAbi,\n        supportedProvider: SupportedProvider,\n        txDefaults: Partial<TxData>,\n        logDecodeDependencies: { [contractName: string]: ContractAbi },\n        _lendingPoolAddressProvider: string,\n    ): Promise<AaveReaderContract> {\n        assert.isHexString('bytecode', bytecode);\n        assert.doesConformToSchema('txDefaults', txDefaults, schemas.txDataSchema, [\n            schemas.addressSchema,\n            schemas.numberSchema,\n            schemas.jsNumber,\n        ]);\n        const provider = providerUtils.standardizeOrThrow(supportedProvider);\n        const constructorAbi = BaseContract._lookupConstructorAbi(abi);\n        [_lendingPoolAddressProvider] = BaseContract._formatABIDataItemList(\n            constructorAbi.inputs,\n            [_lendingPoolAddressProvider],\n            BaseContract._bigNumberToString,\n        );\n        // @ts-ignore\n        const iface = new ethers.utils.Interface(abi);\n        // @ts-ignore\n        const deployInfo = iface.deployFunction;\n        const txData = deployInfo.encode(bytecode, [_lendingPoolAddressProvider]);\n        const web3Wrapper = new Web3Wrapper(provider);\n        const txDataWithDefaults = await BaseContract._applyDefaultsToContractTxDataAsync(\n            {\n                data: txData,\n                ...txDefaults,\n            },\n            web3Wrapper.estimateGasAsync.bind(web3Wrapper),\n        );\n        const txHash = await web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n        const txReceipt = await web3Wrapper.awaitTransactionSuccessAsync(txHash);\n        const contractInstance = new AaveReaderContract(\n            txReceipt.contractAddress as string,\n            provider,\n            txDefaults,\n            logDecodeDependencies,\n        );\n        contractInstance.constructorArgs = [_lendingPoolAddressProvider];\n        return contractInstance;\n    }\n\n    /**\n     * @returns      The contract ABI\n     */\n    public static ABI(): ContractAbi {\n        const abi = [\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: 'ethAccount',\n                        type: 'address',\n                    },\n                    {\n                        name: 'reserves',\n                        type: 'address[]',\n                    },\n                ],\n                name: 'getBatchATokensData',\n                outputs: [\n                    {\n                        name: 'tokenData',\n                        type: 'tuple[]',\n                        components: [\n                            {\n                                name: 'reserveAddress',\n                                type: 'address',\n                            },\n                            {\n                                name: 'allowance',\n                                type: 'uint256',\n                            },\n                            {\n                                name: 'balance',\n                                type: 'uint256',\n                            },\n                            {\n                                name: 'balanceUnderlying',\n                                type: 'uint256',\n                            },\n                            {\n                                name: 'borrowBalance',\n                                type: 'uint256',\n                            },\n                        ],\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                inputs: [\n                    {\n                        name: '_lendingPoolAddressProvider',\n                        type: 'address',\n                    },\n                ],\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'constructor',\n            },\n        ] as ContractAbi;\n        return abi;\n    }\n\n    public getFunctionSignature(methodName: string): string {\n        const index = this._methodABIIndex[methodName];\n        const methodAbi = AaveReaderContract.ABI()[index] as MethodAbi; // tslint:disable-line:no-unnecessary-type-assertion\n        const functionSignature = methodAbiToFunctionSignature(methodAbi);\n        return functionSignature;\n    }\n    public getABIDecodedTransactionData<T>(methodName: string, callData: string): T {\n        const functionSignature = this.getFunctionSignature(methodName);\n        const self = (this as any) as AaveReaderContract;\n        const abiEncoder = self._lookupAbiEncoder(functionSignature);\n        const abiDecodedCallData = abiEncoder.strictDecode<T>(callData);\n        return abiDecodedCallData;\n    }\n    public getABIDecodedReturnData<T>(methodName: string, callData: string): T {\n        const functionSignature = this.getFunctionSignature(methodName);\n        const self = (this as any) as AaveReaderContract;\n        const abiEncoder = self._lookupAbiEncoder(functionSignature);\n        const abiDecodedCallData = abiEncoder.strictDecodeReturnValue<T>(callData);\n        return abiDecodedCallData;\n    }\n    public getSelector(methodName: string): string {\n        const functionSignature = this.getFunctionSignature(methodName);\n        const self = (this as any) as AaveReaderContract;\n        const abiEncoder = self._lookupAbiEncoder(functionSignature);\n        return abiEncoder.getSelector();\n    }\n\n    public getBatchATokensData(\n        ethAccount: string,\n        reserves: string[],\n    ): ContractFunctionObj<\n        Array<{\n            reserveAddress: string;\n            allowance: BigNumber;\n            balance: BigNumber;\n            balanceUnderlying: BigNumber;\n            borrowBalance: BigNumber;\n        }>\n    > {\n        const self = (this as any) as AaveReaderContract;\n        assert.isString('ethAccount', ethAccount);\n        assert.isArray('reserves', reserves);\n        const functionSignature = 'getBatchATokensData(address,address[])';\n\n        return {\n            async callAsync(\n                callData: Partial<CallData> = {},\n                defaultBlock?: BlockParam,\n            ): Promise<\n                Array<{\n                    reserveAddress: string;\n                    allowance: BigNumber;\n                    balance: BigNumber;\n                    balanceUnderlying: BigNumber;\n                    borrowBalance: BigNumber;\n                }>\n            > {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    { ...callData, data: this.getABIEncodedTransactionData() },\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue<\n                    Array<{\n                        reserveAddress: string;\n                        allowance: BigNumber;\n                        balance: BigNumber;\n                        balanceUnderlying: BigNumber;\n                        borrowBalance: BigNumber;\n                    }>\n                >(rawCallResult);\n            },\n            getABIEncodedTransactionData(): string {\n                return self._strictEncodeArguments(functionSignature, [ethAccount.toLowerCase(), reserves]);\n            },\n        };\n    }\n\n    constructor(\n        address: string,\n        supportedProvider: SupportedProvider,\n        txDefaults?: Partial<TxData>,\n        logDecodeDependencies?: { [contractName: string]: ContractAbi },\n        deployedBytecode: string | undefined = AaveReaderContract.deployedBytecode,\n    ) {\n        super(\n            'AaveReader',\n            AaveReaderContract.ABI(),\n            address,\n            supportedProvider,\n            txDefaults,\n            logDecodeDependencies,\n            deployedBytecode,\n        );\n        classUtils.bindAll(this, ['_abiEncoderByFunctionSignature', 'address', '_web3Wrapper']);\n        AaveReaderContract.ABI().forEach((item, index) => {\n            if (item.type === 'function') {\n                const methodAbi = item as MethodAbi;\n                this._methodABIIndex[methodAbi.name] = index;\n            }\n        });\n    }\n}\n\n// tslint:disable:max-file-line-count\n// tslint:enable:no-unbound-method no-parameter-reassignment no-consecutive-blank-lines ordered-imports align\n// tslint:enable:trailing-comma whitespace no-trailing-whitespace\n"],"sourceRoot":""}