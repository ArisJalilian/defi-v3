{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray.js","utils/bzx/tokenizedRegistry.js"],"names":["_toArray","arr","TokenizedRegistryEvents","OwnershipTransferred","TokenizedRegistryContract","address","supportedProvider","txDefaults","logDecodeDependencies","deployedBytecode","ABI","contractName","_methodABIIndex","classUtils","bindAll","_subscriptionManager","SubscriptionManager","_web3Wrapper","forEach","item","index","type","methodAbi","name","artifact","assert","doesConformToSchema","schemas","txDataSchema","addressSchema","numberSchema","jsNumber","undefined","compilerOutput","Error","provider","providerUtils","standardizeOrThrow","bytecode","evm","object","abi","logDecodeDependenciesAbiOnly","Object","keys","key","deployAsync","isHexString","constructorAbi","BaseContract","_lookupConstructorAbi","_formatABIDataItemList","inputs","_bigNumberToString","iface","ethers","Interface","deployInfo","deployFunction","txData","encode","web3Wrapper","Web3Wrapper","_applyDefaultsToContractTxDataAsync","data","estimateGasAsync","bind","txDataWithDefaults","sendTransactionAsync","txHash","logUtils","log","awaitTransactionSuccessAsync","txReceipt","contractAddress","contractInstance","constructorArgs","constant","outputs","payable","stateMutability","anonymous","indexed","components","methodName","this","methodAbiToFunctionSignature","callData","functionSignature","getFunctionSignature","_lookupAbiEncoder","strictDecode","strictDecodeReturnValue","getSelector","self","callAsync","defaultBlock","_assertCallParams","_performCallAsync","getABIEncodedTransactionData","rawCallResult","abiEncoder","string","_strictEncodeArguments","index_0","isString","toLowerCase","isBigNumber","_newOwner","opts","shouldValidate","_applyDefaultsToTxDataAsync","_promiseWithTransactionHash","_tokens","_assets","_names","_symbols","_types","isArray","_token","_asset","_name","_symbol","_type","_start","_count","_tokenType","eventName","indexFilterValues","callback","isVerbose","blockPollingIntervalMs","doesBelongToStringEnum","indexFilterValuesSchema","isFunction","subscriptionToken","subscribe","unsubscribe","unsubscribeAll","blockRange","blockRangeSchema","getLogsAsync","logs"],"mappings":"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","file":"static/js/40.bd9aca65.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","// tslint:disable:no-consecutive-blank-lines ordered-imports align trailing-comma enum-naming\n// tslint:disable:whitespace no-unbound-method no-trailing-whitespace\n// tslint:disable:no-unused-variable\nimport {\n    BaseContract,\n    SubscriptionManager,\n    methodAbiToFunctionSignature,\n} from '@0x/base-contract';\nimport { schemas } from '@0x/json-schemas';\nimport { classUtils, logUtils, providerUtils } from '@0x/utils';\nimport { Web3Wrapper } from '@0x/web3-wrapper';\nimport { assert } from '@0x/assert';\nimport * as ethers from 'ethers';\n\nconst TokenizedRegistryEvents = {\n    OwnershipTransferred: 'OwnershipTransferred',\n}\n/* istanbul ignore next */\n// tslint:disable:no-parameter-reassignment\n// tslint:disable-next-line:class-name\nexport class TokenizedRegistryContract extends BaseContract {\n    /**\n     * @ignore\n     */\n    deployedBytecode;\n    contractName = 'TokenizedRegistry'\n    _methodABIIndex = {};\n    _subscriptionManager;\n\n    async deployFrom0xArtifactAsync(\n        artifact,\n        supportedProvider,\n        txDefaults,\n        logDecodeDependencies,\n    ) {\n        assert.doesConformToSchema('txDefaults', txDefaults, schemas.txDataSchema, [\n            schemas.addressSchema,\n            schemas.numberSchema,\n            schemas.jsNumber,\n        ]);\n        if (artifact.compilerOutput === undefined) {\n            throw new Error('Compiler output not found in the artifact file');\n        }\n        const provider = providerUtils.standardizeOrThrow(supportedProvider);\n        const bytecode = artifact.compilerOutput.evm.bytecode.object;\n        const abi = artifact.compilerOutput.abi;\n        const logDecodeDependenciesAbiOnly = {};\n        if (Object.keys(logDecodeDependencies) !== undefined) {\n            for (const key of Object.keys(logDecodeDependencies)) {\n                logDecodeDependenciesAbiOnly[key] = logDecodeDependencies[key].compilerOutput.abi;\n            }\n        }\n        return TokenizedRegistryContract.deployAsync(bytecode, abi, provider, txDefaults, logDecodeDependenciesAbiOnly);\n    }\n\n    async deployAsync(\n        bytecode,\n        abi,\n        supportedProvider,\n        txDefaults,\n        logDecodeDependencies,\n    ) {\n        assert.isHexString('bytecode', bytecode);\n        assert.doesConformToSchema('txDefaults', txDefaults, schemas.txDataSchema, [\n            schemas.addressSchema,\n            schemas.numberSchema,\n            schemas.jsNumber,\n        ]);\n        const provider = providerUtils.standardizeOrThrow(supportedProvider);\n        const constructorAbi = BaseContract._lookupConstructorAbi(abi);\n        [] = BaseContract._formatABIDataItemList(constructorAbi.inputs, [], BaseContract._bigNumberToString);\n        //@ts-ignore\n        const iface = new ethers.utils.Interface(abi);\n        const deployInfo = iface.deployFunction;\n        const txData = deployInfo.encode(bytecode, []);\n        const web3Wrapper = new Web3Wrapper(provider);\n        const txDataWithDefaults = await BaseContract._applyDefaultsToContractTxDataAsync(\n            {\n                data: txData,\n                ...txDefaults,\n            },\n            web3Wrapper.estimateGasAsync.bind(web3Wrapper),\n        );\n        const txHash = await web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n        logUtils.log(`transactionHash: ${txHash}`);\n        const txReceipt = await web3Wrapper.awaitTransactionSuccessAsync(txHash);\n        logUtils.log(`TokenizedRegistry successfully deployed at ${txReceipt.contractAddress}`);\n        const contractInstance = new TokenizedRegistryContract(\n            txReceipt.contractAddress,\n            provider,\n            txDefaults,\n            logDecodeDependencies,\n        );\n        contractInstance.constructorArgs = [];\n        return contractInstance;\n    }\n\n    /**\n     * @returns      The contract ABI\n     */\n    ABI() {\n        const abi = [\n            {\n                constant: true,\n                inputs: [],\n                name: 'owner',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'address',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: 'index_0',\n                        type: 'address',\n                    },\n                ],\n                name: 'tokens',\n                outputs: [\n                    {\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        name: 'asset',\n                        type: 'address',\n                    },\n                    {\n                        name: 'name',\n                        type: 'string',\n                    },\n                    {\n                        name: 'symbol',\n                        type: 'string',\n                    },\n                    {\n                        name: 'tokenType',\n                        type: 'uint256',\n                    },\n                    {\n                        name: 'index',\n                        type: 'uint256',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: 'index_0',\n                        type: 'uint256',\n                    },\n                ],\n                name: 'tokenAddresses',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'address',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: '_newOwner',\n                        type: 'address',\n                    },\n                ],\n                name: 'transferOwnership',\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                anonymous: false,\n                inputs: [\n                    {\n                        name: 'previousOwner',\n                        type: 'address',\n                        indexed: true,\n                    },\n                    {\n                        name: 'newOwner',\n                        type: 'address',\n                        indexed: true,\n                    },\n                ],\n                name: 'OwnershipTransferred',\n                outputs: [],\n                type: 'event',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: '_tokens',\n                        type: 'address[]',\n                    },\n                    {\n                        name: '_assets',\n                        type: 'address[]',\n                    },\n                    {\n                        name: '_names',\n                        type: 'string[]',\n                    },\n                    {\n                        name: '_symbols',\n                        type: 'string[]',\n                    },\n                    {\n                        name: '_types',\n                        type: 'uint256[]',\n                    },\n                ],\n                name: 'addTokens',\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: '_tokens',\n                        type: 'address[]',\n                    },\n                ],\n                name: 'removeTokens',\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: '_token',\n                        type: 'address',\n                    },\n                    {\n                        name: '_asset',\n                        type: 'address',\n                    },\n                    {\n                        name: '_name',\n                        type: 'string',\n                    },\n                    {\n                        name: '_symbol',\n                        type: 'string',\n                    },\n                    {\n                        name: '_type',\n                        type: 'uint256',\n                    },\n                ],\n                name: 'addToken',\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: '_token',\n                        type: 'address',\n                    },\n                ],\n                name: 'removeToken',\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: '_token',\n                        type: 'address',\n                    },\n                    {\n                        name: '_name',\n                        type: 'string',\n                    },\n                ],\n                name: 'setTokenName',\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: false,\n                inputs: [\n                    {\n                        name: '_token',\n                        type: 'address',\n                    },\n                    {\n                        name: '_symbol',\n                        type: 'string',\n                    },\n                ],\n                name: 'setTokenSymbol',\n                outputs: [],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: '_symbol',\n                        type: 'string',\n                    },\n                ],\n                name: 'getTokenAddressBySymbol',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'address',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: '_name',\n                        type: 'string',\n                    },\n                ],\n                name: 'getTokenAddressByName',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'address',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: '_token',\n                        type: 'address',\n                    },\n                ],\n                name: 'getTokenByAddress',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'tuple',\n                        components: [\n                            {\n                                name: 'token',\n                                type: 'address',\n                            },\n                            {\n                                name: 'asset',\n                                type: 'address',\n                            },\n                            {\n                                name: 'name',\n                                type: 'string',\n                            },\n                            {\n                                name: 'symbol',\n                                type: 'string',\n                            },\n                            {\n                                name: 'tokenType',\n                                type: 'uint256',\n                            },\n                            {\n                                name: 'index',\n                                type: 'uint256',\n                            },\n                        ],\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: '_name',\n                        type: 'string',\n                    },\n                ],\n                name: 'getTokenByName',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'tuple',\n                        components: [\n                            {\n                                name: 'token',\n                                type: 'address',\n                            },\n                            {\n                                name: 'asset',\n                                type: 'address',\n                            },\n                            {\n                                name: 'name',\n                                type: 'string',\n                            },\n                            {\n                                name: 'symbol',\n                                type: 'string',\n                            },\n                            {\n                                name: 'tokenType',\n                                type: 'uint256',\n                            },\n                            {\n                                name: 'index',\n                                type: 'uint256',\n                            },\n                        ],\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: '_symbol',\n                        type: 'string',\n                    },\n                ],\n                name: 'getTokenBySymbol',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'tuple',\n                        components: [\n                            {\n                                name: 'token',\n                                type: 'address',\n                            },\n                            {\n                                name: 'asset',\n                                type: 'address',\n                            },\n                            {\n                                name: 'name',\n                                type: 'string',\n                            },\n                            {\n                                name: 'symbol',\n                                type: 'string',\n                            },\n                            {\n                                name: 'tokenType',\n                                type: 'uint256',\n                            },\n                            {\n                                name: 'index',\n                                type: 'uint256',\n                            },\n                        ],\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [],\n                name: 'getTokenAddresses',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'address[]',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: '_start',\n                        type: 'uint256',\n                    },\n                    {\n                        name: '_count',\n                        type: 'uint256',\n                    },\n                    {\n                        name: '_tokenType',\n                        type: 'uint256',\n                    },\n                ],\n                name: 'getTokens',\n                outputs: [\n                    {\n                        name: 'tokenData',\n                        type: 'tuple[]',\n                        components: [\n                            {\n                                name: 'token',\n                                type: 'address',\n                            },\n                            {\n                                name: 'asset',\n                                type: 'address',\n                            },\n                            {\n                                name: 'name',\n                                type: 'string',\n                            },\n                            {\n                                name: 'symbol',\n                                type: 'string',\n                            },\n                            {\n                                name: 'tokenType',\n                                type: 'uint256',\n                            },\n                            {\n                                name: 'index',\n                                type: 'uint256',\n                            },\n                        ],\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: '_token',\n                        type: 'address',\n                    },\n                    {\n                        name: '_tokenType',\n                        type: 'uint256',\n                    },\n                ],\n                name: 'isTokenType',\n                outputs: [\n                    {\n                        name: 'valid',\n                        type: 'bool',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n            {\n                constant: true,\n                inputs: [\n                    {\n                        name: '_token',\n                        type: 'address',\n                    },\n                    {\n                        name: '_tokenType',\n                        type: 'uint256',\n                    },\n                ],\n                name: 'getTokenAsset',\n                outputs: [\n                    {\n                        name: '',\n                        type: 'address',\n                    },\n                ],\n                payable: false,\n                stateMutability: 'view',\n                type: 'function',\n            },\n        ];\n        return abi;\n    }\n\n    getFunctionSignature(methodName) {\n        const index = this._methodABIIndex[methodName];\n        const methodAbi = TokenizedRegistryContract.ABI()[index]; // tslint:disable-line:no-unnecessary-type-assertion\n        const functionSignature = methodAbiToFunctionSignature(methodAbi);\n        return functionSignature;\n    }\n\n    getABIDecodedTransactionData(methodName, callData) {\n        const functionSignature = this.getFunctionSignature(methodName);\n        const self = this\n        const abiEncoder = self._lookupAbiEncoder(functionSignature);\n        const abiDecodedCallData = abiEncoder.strictDecode(callData);\n        return abiDecodedCallData;\n    }\n\n    getABIDecodedReturnData(methodName, callData) {\n        const functionSignature = this.getFunctionSignature(methodName);\n        const self = this\n        const abiEncoder = self._lookupAbiEncoder(functionSignature);\n        const abiDecodedCallData = abiEncoder.strictDecodeReturnValue(callData);\n        return abiDecodedCallData;\n    }\n\n    getSelector(methodName) {\n        const functionSignature = this.getFunctionSignature(methodName);\n        const self = this\n        const abiEncoder = self._lookupAbiEncoder(functionSignature);\n        return abiEncoder.getSelector();\n    }\n\n    owner() {\n        const self = this\n        const functionSignature = 'owner()';\n\n        return {\n            async callAsync(callData = {}, defaultBlock) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue < string > (rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, []);\n            },\n        };\n    }\n\n    tokens(index_0) {\n        const self = this\n        assert.isString('index_0', index_0);\n        const functionSignature = 'tokens(address)';\n\n        return {\n            async callAsync(\n                callData = {},\n                defaultBlock,\n            ) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue(\n                    rawCallResult,\n                );\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [index_0.toLowerCase()]);\n            },\n        };\n    }\n\n    tokenAddresses(index_0) {\n        const self = this\n        assert.isBigNumber('index_0', index_0);\n        const functionSignature = 'tokenAddresses(uint256)';\n\n        return {\n            async callAsync(callData = {}, defaultBlock) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue < string > (rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [index_0]);\n            },\n        };\n    }\n\n    transferOwnership(_newOwner) {\n        const self = this\n        assert.isString('_newOwner', _newOwner);\n        const functionSignature = 'transferOwnership(address)';\n\n        return {\n            async sendTransactionAsync(\n                txData,\n                opts = {shouldValidate: true},\n            ) {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    {...txData, data: this.getABIEncodedTransactionData()},\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData,\n                opts = {shouldValidate: true},\n            ) {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData) {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData = {}, defaultBlock) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue(rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [_newOwner.toLowerCase()]);\n            },\n        };\n    }\n\n    addTokens(\n        _tokens,\n        _assets,\n        _names,\n        _symbols,\n        _types,\n    ) {\n        const self = this\n        assert.isArray('_tokens', _tokens);\n        assert.isArray('_assets', _assets);\n        assert.isArray('_names', _names);\n        assert.isArray('_symbols', _symbols);\n        assert.isArray('_types', _types);\n        const functionSignature = 'addTokens(address[],address[],string[],string[],uint256[])';\n\n        return {\n            async sendTransactionAsync(\n                txData,\n                opts = {shouldValidate: true},\n            ) {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    {...txData, data: this.getABIEncodedTransactionData()},\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData,\n                opts = {shouldValidate: true},\n            ) {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData) {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData = {}, defaultBlock) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue(rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [_tokens, _assets, _names, _symbols, _types]);\n            },\n        };\n    }\n\n    removeTokens(_tokens) {\n        const self = this\n        assert.isArray('_tokens', _tokens);\n        const functionSignature = 'removeTokens(address[])';\n\n        return {\n            async sendTransactionAsync(\n                txData,\n                opts = {shouldValidate: true},\n            ) {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    {...txData, data: this.getABIEncodedTransactionData()},\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData,\n                opts = {shouldValidate: true},\n            ) {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData) {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData = {}, defaultBlock) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue(rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [_tokens]);\n            },\n        };\n    }\n\n    addToken(\n        _token,\n        _asset,\n        _name,\n        _symbol,\n        _type,\n    ) {\n        const self = this\n        assert.isString('_token', _token);\n        assert.isString('_asset', _asset);\n        assert.isString('_name', _name);\n        assert.isString('_symbol', _symbol);\n        assert.isBigNumber('_type', _type);\n        const functionSignature = 'addToken(address,address,string,string,uint256)';\n\n        return {\n            async sendTransactionAsync(\n                txData,\n                opts = {shouldValidate: true},\n            ) {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    {...txData, data: this.getABIEncodedTransactionData()},\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData,\n                opts = {shouldValidate: true},\n            ) {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData) {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData = {}, defaultBlock) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue(rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [\n                    _token.toLowerCase(),\n                    _asset.toLowerCase(),\n                    _name,\n                    _symbol,\n                    _type,\n                ]);\n            },\n        };\n    }\n\n    removeToken(_token) {\n        const self = this\n        assert.isString('_token', _token);\n        const functionSignature = 'removeToken(address)';\n\n        return {\n            async sendTransactionAsync(\n                txData,\n                opts = {shouldValidate: true},\n            ) {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    {...txData, data: this.getABIEncodedTransactionData()},\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData,\n                opts = {shouldValidate: true},\n            ) {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData) {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData = {}, defaultBlock) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue(rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [_token.toLowerCase()]);\n            },\n        };\n    }\n\n    setTokenName(_token, _name) {\n        const self = this\n        assert.isString('_token', _token);\n        assert.isString('_name', _name);\n        const functionSignature = 'setTokenName(address,string)';\n\n        return {\n            async sendTransactionAsync(\n                txData,\n                opts = {shouldValidate: true},\n            ) {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    {...txData, data: this.getABIEncodedTransactionData()},\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData,\n                opts = {shouldValidate: true},\n            ) {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData) {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData = {}, defaultBlock) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue(rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [_token.toLowerCase(), _name]);\n            },\n        };\n    }\n\n    setTokenSymbol(_token, _symbol) {\n        const self = this\n        assert.isString('_token', _token);\n        assert.isString('_symbol', _symbol);\n        const functionSignature = 'setTokenSymbol(address,string)';\n\n        return {\n            async sendTransactionAsync(\n                txData,\n                opts = {shouldValidate: true},\n            ) {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n                    {...txData, data: this.getABIEncodedTransactionData()},\n                    this.estimateGasAsync.bind(this),\n                );\n                if (opts.shouldValidate !== false) {\n                    await this.callAsync(txDataWithDefaults);\n                }\n                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n            },\n            awaitTransactionSuccessAsync(\n                txData,\n                opts = {shouldValidate: true},\n            ) {\n                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n            },\n            async estimateGasAsync(txData) {\n                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n                    ...txData,\n                    data: this.getABIEncodedTransactionData(),\n                });\n                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n            },\n            async callAsync(callData = {}, defaultBlock) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue(rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [_token.toLowerCase(), _symbol]);\n            },\n        };\n    }\n\n    getTokenAddressBySymbol(_symbol) {\n        const self = this\n        assert.isString('_symbol', _symbol);\n        const functionSignature = 'getTokenAddressBySymbol(string)';\n\n        return {\n            async callAsync(callData = {}, defaultBlock) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue < string > (rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [_symbol]);\n            },\n        };\n    }\n\n    getTokenAddressByName(_name) {\n        const self = this\n        assert.isString('_name', _name);\n        const functionSignature = 'getTokenAddressByName(string)';\n\n        return {\n            async callAsync(callData = {}, defaultBlock) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue < string > (rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [_name]);\n            },\n        };\n    }\n\n    getTokenByAddress(\n        _token,\n    ) {\n        const self = this\n        assert.isString('_token', _token);\n        const functionSignature = 'getTokenByAddress(address)';\n\n        return {\n            async callAsync(\n                callData = {},\n                defaultBlock,\n            ) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue(rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [_token.toLowerCase()]);\n            },\n        };\n    }\n\n    getTokenByName(\n        _name,\n    ) {\n        const self = this\n        assert.isString('_name', _name);\n        const functionSignature = 'getTokenByName(string)';\n\n        return {\n            async callAsync(\n                callData = {},\n                defaultBlock\n            ) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue(rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [_name]);\n            },\n        };\n    }\n\n    getTokenBySymbol(\n        _symbol,\n    ) {\n        const self = this\n        assert.isString('_symbol', _symbol);\n        const functionSignature = 'getTokenBySymbol(string)';\n\n        return {\n            async callAsync(\n                callData = {},\n                defaultBlock,\n            ) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue(rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [_symbol]);\n            },\n        };\n    }\n\n    getTokenAddresses() {\n        const self = this\n        const functionSignature = 'getTokenAddresses()';\n\n        return {\n            async callAsync(callData = {}, defaultBlock) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue(rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, []);\n            },\n        };\n    }\n\n    getTokens(\n        _start,\n        _count,\n        _tokenType,\n    ) {\n        const self = this\n        assert.isBigNumber('_start', _start);\n        assert.isBigNumber('_count', _count);\n        assert.isBigNumber('_tokenType', _tokenType);\n        const functionSignature = 'getTokens(uint256,uint256,uint256)';\n\n        return {\n            async callAsync(\n                callData = {},\n                defaultBlock\n            ) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue(rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [_start, _count, _tokenType]);\n            },\n        };\n    }\n\n    isTokenType(_token, _tokenType) {\n        const self = this\n        assert.isString('_token', _token);\n        assert.isBigNumber('_tokenType', _tokenType);\n        const functionSignature = 'isTokenType(address,uint256)';\n\n        return {\n            async callAsync(callData = {}, defaultBlock) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue(rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [_token.toLowerCase(), _tokenType]);\n            },\n        };\n    }\n\n    getTokenAsset(_token, _tokenType) {\n        const self = this\n        assert.isString('_token', _token);\n        assert.isBigNumber('_tokenType', _tokenType);\n        const functionSignature = 'getTokenAsset(address,uint256)';\n\n        return {\n            async callAsync(callData = {}, defaultBlock) {\n                BaseContract._assertCallParams(callData, defaultBlock);\n                const rawCallResult = await self._performCallAsync(\n                    {...callData, data: this.getABIEncodedTransactionData()},\n                    defaultBlock,\n                );\n                const abiEncoder = self._lookupAbiEncoder(functionSignature);\n                return abiEncoder.strictDecodeReturnValue(rawCallResult);\n            },\n            getABIEncodedTransactionData() {\n                return self._strictEncodeArguments(functionSignature, [_token.toLowerCase(), _tokenType]);\n            },\n        };\n    }\n\n    /**\n     * Subscribe to an event type emitted by the TokenizedRegistry contract.\n     * @param eventName The TokenizedRegistry contract event you would like to subscribe to.\n     * @param indexFilterValues An object where the keys are indexed args returned by the event and\n     * the value is the value you are interested in. E.g `{maker: aUserAddressHex}`\n     * @param callback Callback that gets called when a log is added/removed\n     * @param isVerbose Enable verbose subscription warnings (e.g recoverable network issues encountered)\n     * @return Subscription token used later to unsubscribe\n     */\n    subscribe(\n        eventName,\n        indexFilterValues,\n        callback,\n        isVerbose = false,\n        blockPollingIntervalMs,\n    ) {\n        assert.doesBelongToStringEnum('eventName', eventName, TokenizedRegistryEvents);\n        assert.doesConformToSchema('indexFilterValues', indexFilterValues, schemas.indexFilterValuesSchema);\n        assert.isFunction('callback', callback);\n        const subscriptionToken = this._subscriptionManager.subscribe(\n            this.address,\n            eventName,\n            indexFilterValues,\n            TokenizedRegistryContract.ABI(),\n            callback,\n            isVerbose,\n            blockPollingIntervalMs,\n        );\n        return subscriptionToken;\n    }\n\n    /**\n     * Cancel a subscription\n     * @param subscriptionToken Subscription token returned by `subscribe()`\n     */\n    unsubscribe(subscriptionToken) {\n        this._subscriptionManager.unsubscribe(subscriptionToken);\n    }\n\n    /**\n     * Cancels all existing subscriptions\n     */\n    unsubscribeAll() {\n        this._subscriptionManager.unsubscribeAll();\n    }\n\n    /**\n     * Gets historical logs without creating a subscription\n     * @param eventName The TokenizedRegistry contract event you would like to subscribe to.\n     * @param blockRange Block range to get logs from.\n     * @param indexFilterValues An object where the keys are indexed args returned by the event and\n     * the value is the value you are interested in. E.g `{_from: aUserAddressHex}`\n     * @return Array of logs that match the parameters\n     */\n    async getLogsAsync(\n        eventName,\n        blockRange,\n        indexFilterValues,\n    ) {\n        assert.doesBelongToStringEnum('eventName', eventName, TokenizedRegistryEvents);\n        assert.doesConformToSchema('blockRange', blockRange, schemas.blockRangeSchema);\n        assert.doesConformToSchema('indexFilterValues', indexFilterValues, schemas.indexFilterValuesSchema);\n        const logs = await this._subscriptionManager.getLogsAsync(\n            this.address,\n            eventName,\n            blockRange,\n            indexFilterValues,\n            TokenizedRegistryContract.ABI(),\n        );\n        return logs;\n    }\n\n    constructor(\n        address,\n        supportedProvider,\n        txDefaults,\n        logDecodeDependencies,\n        deployedBytecode = TokenizedRegistryContract.deployedBytecode,\n    ) {\n        super(\n            'TokenizedRegistry',\n            TokenizedRegistryContract.ABI(),\n            address,\n            supportedProvider,\n            txDefaults,\n            logDecodeDependencies,\n            deployedBytecode,\n        );\n        classUtils.bindAll(this, ['_abiEncoderByFunctionSignature', 'address', '_web3Wrapper']);\n        this._subscriptionManager = new SubscriptionManager(\n            TokenizedRegistryContract.ABI(),\n            this._web3Wrapper,\n        );\n        TokenizedRegistryContract.ABI().forEach((item, index) => {\n            if (item.type === 'function') {\n                const methodAbi = item;\n                this._methodABIIndex[methodAbi.name] = index;\n            }\n        });\n    }\n}\n\n\n// tslint:disable:max-file-line-count\n// tslint:enable:no-unbound-method no-parameter-reassignment no-consecutive-blank-lines ordered-imports align\n// tslint:enable:trailing-comma whitespace no-trailing-whitespace\n"],"sourceRoot":""}